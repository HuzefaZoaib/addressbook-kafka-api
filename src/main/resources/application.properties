spring.application.name=Address Book Kafka
server.port=8080

# Kafka Connection
# # this property will come from dev or prod
# #KAFKA_BOOTSTRAP_SERVERS_CONFIG=3.215.143.52:9092,3.215.143.52:9093,3.215.143.52:9094
KAFKA_KEY_SERIALIZER_CLASS_CONFIG=org.apache.kafka.common.serialization.LongSerializer
KAFKA_VALUE_SERIALIZER_CLASS_CONFIG=org.springframework.kafka.support.serializer.JsonSerializer
KAFKA_TOPIC=kafka.addressbooks

# Kafka Producer
# # ACK from Kafka's Partition Leader, once message is received by Leader
KAFKA_ACKS_CONFIG=1
KAFKA_COMPRESSION_TYPE_CONFIG=gzip
#Every addressbook generation is taking atleast 100 mili, therefore 10000 will take 1000000 mill. 
#If 5 thread are doing this then it become 200000 mill = 200 secs. 
#And if we make a batch of 10 addressbooks push at a time then 20mill it will take to get generate 
#I also tested, it is taking 217sec to generate 10000 addressbooks
#Probably we cannot the exact size of message, producer also appends data to it
#therefore batch size is 500KB
KAFKA_BATCH_SIZE_CONFIG=524288
KAFKA_LINGER_MS_CONFIG=30

# Kafka Consumer
KAFKA_AUTO_OFFSET_RESET_CONFIG=earliest
KAFKA_KEY_DESERIALIZER_CLASS_CONFIG=org.apache.kafka.common.serialization.LongDeserializer
KAFKA_VALUE_DESERIALIZER_CLASS_CONFIG=com.example.addressbook.kafka.AddressBookJsonDeserializer
# # One message size will be around {"id":"67","name":"Gary Gray","phone":"(647) 789-9014","address":"2440 High St, Boston, WA 98142","zipCode":"53623","generator":"Thread-1","consume":""}
KAFKA_FETCH_MIN_BYTES_CONFIG=1760
# # 10 message size will be around 1760, but 500KB has been set
KAFKA_MAX_PARTITION_FETCH_BYTES_CONFIG=524288
KAFKA_FETCH_MAX_WAIT_MS_CONFIG=100
KAFKA_ENABLE_AUTO_COMMIT_CONFIG=false
# # Wait for 5min idle, before re-balancing
KAFKA_MAX_POLL_INTERVAL_MS_CONFIG=18000000
# # 10 message in a single consume
KAFKA_MAX_POLL_RECORDS_CONFIG=10
